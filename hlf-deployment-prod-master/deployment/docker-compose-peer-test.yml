
version: '2'


services:

    peer0.org1.example.com:
        container_name: peer0.org1.example.com
        hostname: peer0.org1.example.com
        image: hyperledger/fabric-peer:1.2.0
        environment:
           - CORE_PEER_ID=peer0.org1.example.com
           - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
           - CORE_PEER_CHAINCODELISTENADDRESS=peer0.org1.example.com:7052
           - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.example.com:7051
           - CORE_PEER_LOCALMSPID=Org1MSP
           - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
           # the following setting starts chaincode containers on the same
           # bridge network as the peers
           # https://docs.docker.com/compose/networking/
           #- CORE_LOGGING_LEVEL=ERROR
           - CORE_LOGGING_LEVEL=INFO
           - CORE_PEER_GOSSIP_USELEADERELECTION=true
           - CORE_PEER_GOSSIP_ORGLEADER=false
           - CORE_PEER_PROFILE_ENABLED=true
           - CORE_PEER_TLS_ENABLED=false
        working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
        command: peer node start
        volumes:
           - /var/run/:/host/var/run/
           - ../crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp:/etc/hyperledger/fabric/msp
        ports:
          - 7051:7051
          - 7052:7052
          - 7053:7053
        depends_on:
            - peer1.org1.example.com
            - peer0.org2.example.com
            - peer1.org2.example.com
            - cli
            - orderer0.example.com
            - orderer1.example.com
            - orderer2.example.com

    cli:
        container_name: cli
        image: hyperledger/fabric-tools:1.2.0
        tty: true
        environment:
         - GOPATH=/opt/gopath
         - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
         # - CORE_LOGGING_LEVEL=ERROR
         - CORE_LOGGING_LEVEL=INFO
         - CORE_PEER_ID=cli
         #- CORE_PEER_ADDRESS=peer0.org1.example.com:7051
         #- CORE_PEER_LOCALMSPID=Org1MSP
         #- CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
        working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
        volumes:
           - /var/run/:/host/var/run/
           - ../chaincode/go/:/opt/gopath/src/github.com/hyperledger/fabric/kafkapeer/chaincode/go
           - ../crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
           - ../channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts
        depends_on:
            - peer0.org1.example.com
            - peer1.org1.example.com
            - peer0.org2.example.com
            - peer1.org2.example.com
            - cli
            - orderer0.example.com
            - orderer1.example.com
            - orderer2.example.com

    peer1.org1.example.com:
        container_name: peer1.org1.example.com
        hostname: peer1.org1.example.com
        image: hyperledger/fabric-peer:1.2.0
        environment:
           - CORE_PEER_ID=peer1.org1.example.com
           - CORE_PEER_ADDRESS=peer1.org1.example.com:8051
           - CORE_PEER_CHAINCODELISTENADDRESS=peer1.org1.example.com:8052
           - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org1.example.com:8051
           - CORE_PEER_LOCALMSPID=Org1MSP
           - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
           # the following setting starts chaincode containers on the same
           # bridge network as the peers
           # https://docs.docker.com/compose/networking/
           #- CORE_LOGGING_LEVEL=ERROR
           - CORE_LOGGING_LEVEL=INFO
           - CORE_PEER_GOSSIP_USELEADERELECTION=true
           - CORE_PEER_GOSSIP_ORGLEADER=false
           - CORE_PEER_PROFILE_ENABLED=true
           - CORE_PEER_TLS_ENABLED=false
        working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
        command: peer node start
        volumes:
           - /var/run/:/host/var/run/
           - ../crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/msp:/etc/hyperledger/fabric/msp
        ports:
          - 8051:7051
          - 8052:7052
          - 8053:7053
        depends_on:
            - peer0.org1.example.com
            - peer0.org2.example.com
            - peer1.org2.example.com
            - cli
            - orderer0.example.com
            - orderer1.example.com
            - orderer2.example.com

    peer0.org2.example.com:
        container_name: peer0.org2.example.com
        hostname: peer0.org2.example.com
        image: hyperledger/fabric-peer:1.2.0
        environment:
           - CORE_PEER_ID=peer0.org2.example.com
           - CORE_PEER_ADDRESS=peer0.org2.example.com:9051
           - CORE_PEER_CHAINCODELISTENADDRESS=peer0.org2.example.com:9052
           - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org2.example.com:9051
           - CORE_PEER_LOCALMSPID=Org2MSP
           - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
           # the following setting starts chaincode containers on the same
           # bridge network as the peers
           # https://docs.docker.com/compose/networking/
           #- CORE_LOGGING_LEVEL=ERROR
           - CORE_LOGGING_LEVEL=INFO
           - CORE_PEER_GOSSIP_USELEADERELECTION=true
           - CORE_PEER_GOSSIP_ORGLEADER=false
           - CORE_PEER_PROFILE_ENABLED=true
           - CORE_PEER_TLS_ENABLED=false
        working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
        command: peer node start
        volumes:
           - /var/run/:/host/var/run/
           - ../crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/msp:/etc/hyperledger/fabric/msp
        ports:
          - 9051:7051
          - 9052:7052
          - 9053:7053
        depends_on:
            - peer1.org1.example.com
            - peer0.org1.example.com
            - peer1.org2.example.com
            - cli
            - orderer0.example.com
            - orderer1.example.com
            - orderer2.example.com


    peer1.org2.example.com:
        container_name: peer1.org2.example.com
        hostname: peer1.org2.example.com
        image: hyperledger/fabric-peer:1.2.0
        environment:
           - CORE_PEER_ID=peer1.org2.example.com
           - CORE_PEER_ADDRESS=peer1.org2.example.com:10051
           - CORE_PEER_CHAINCODELISTENADDRESS=peer1.org2.example.com:10052
           - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org2.example.com:10051
           - CORE_PEER_LOCALMSPID=Org2MSP
           - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
           # the following setting starts chaincode containers on the same
           # bridge network as the peers
           # https://docs.docker.com/compose/networking/
           #- CORE_LOGGING_LEVEL=ERROR
           - CORE_LOGGING_LEVEL=INFO
           - CORE_PEER_GOSSIP_USELEADERELECTION=true
           - CORE_PEER_GOSSIP_ORGLEADER=false
           - CORE_PEER_PROFILE_ENABLED=true
           - CORE_PEER_TLS_ENABLED=false
        working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
        command: peer node start
        volumes:
           - /var/run/:/host/var/run/
           - ../crypto-config/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/msp:/etc/hyperledger/fabric/msp
        ports:
          - 10051:7051
          - 10052:7052
          - 10053:7053
        depends_on:
            - peer1.org1.example.com
            - peer0.org2.example.com
            - peer0.org1.example.com
            - cli
            - orderer0.example.com
            - orderer1.example.com
            - orderer2.example.com



